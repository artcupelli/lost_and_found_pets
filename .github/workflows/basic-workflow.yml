name: CI

on:
 # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - branches: [ "main" ]
    tags:
      '!*' # Do not execute on tags
    paths:
      - src/*
      - test/*
      - '*.json'
      - yarn.lock
  pull_request:
    paths:
      - '!*.MD'
      - branches: [ "main" ]

# Allows you to run this workflow manually from the Actions tab
workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
  test:
    strategy:
      matrix:
        platform: [ ubuntu-latest, macOS-latest ]
        node: [ '12', '10' ]
    name: test/node ${{ matrix.node }}/${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@main
    - uses: actions/setup-node@main
      with:
        node-version: ${{ matrix.node }}
    - run: npm install -g yarn
    - run: yarn install
    - run: yarn build
    - run: yarn test
  coverage:
    needs: [ test ]
    name: coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: actions/setup-node@main
      with:
        node-version: '12'
    - run: npm install -g yarn
    - run: yarn install
    - run: yarn build
    - uses: math-sousa/codeclimate-action@v3
      env:
        CC_TEST_REPORTER_ID: d434f6495b55f9da02200d0663f9f08525866738d530107023563903bf5d9334
        gitBranchVars: []string{"GIT_BRANCH", "APPVEYOR_REPO_BRANCH", "BRANCH_NAME", "BUILDKITE_BRANCH", "CIRCLE_BRANCH", "CI_BRANCH", "CI_BUILD_REF_NAME", "DRONE_BRANCH", "HEROKU_TEST_RUN_BRANCH", "TRAVIS_PULL_REQUEST_BRANCH", "TRAVIS_BRANCH", "WERCKER_GIT_BRANCH", "CI_COMMIT_REF_NAME", "BITRISE_GIT_BRANCH", "SEMAPHORE_GIT_PR_BRANCH", "SEMAPHORE_GIT_BRANCH", "GITHUB_REF_NAME"}
        gitCommitShaVars: []string{"GIT_COMMIT_SHA", "APPVEYOR_REPO_COMMIT", "BUILDKITE_COMMIT", "CIRCLE_SHA1", "CI_BUILD_REF", "CI_BUILD_SHA", "CI_COMMIT", "CI_COMMIT_ID", "DRONE_COMMIT", "GIT_COMMIT", "HEROKU_TEST_RUN_COMMIT_VERSION", "WERCKER_GIT_COMMIT", "TRAVIS_PULL_REQUEST_SHA", "TRAVIS_COMMIT", "CI_COMMIT_SHA", "BITRISE_GIT_COMMIT", "SEMAPHORE_GIT_SHA", "GITHUB_SHA"}
        gitCommittedAtVars: []string{"GIT_COMMITTED_AT", "GIT_COMMITED_AT", "CI_COMMITTED_AT", "CI_COMMITED_AT", "CI_TIMESTAMP"}
      with:
        coverageCommand: yarn coverage